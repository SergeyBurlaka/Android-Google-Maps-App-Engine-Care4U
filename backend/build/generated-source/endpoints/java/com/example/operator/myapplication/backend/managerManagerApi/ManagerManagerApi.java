/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-07-08 17:28:43 UTC)
 * on 2016-08-09 at 09:50:50 UTC 
 * Modify at your own risk.
 */

package com.example.operator.myapplication.backend.managerManagerApi;

/**
 * Service definition for ManagerManagerApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ManagerManagerApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class ManagerManagerApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.22.0 of the managerManagerApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://sincere-baton-123818.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "managerManagerApi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ManagerManagerApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ManagerManagerApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the ManagerManager collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ManagerManagerApi managerManagerApi = new ManagerManagerApi(...);}
   *   {@code ManagerManagerApi.ManagerManager.List request = managerManagerApi.managerManager().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public ManagerManager managerManager() {
    return new ManagerManager();
  }

  /**
   * The "managerManager" collection of methods.
   */
  public class ManagerManager {

    /**
     * Create a request for the method "managerManager.changeEmployeeRegIInRelationsGroup".
     *
     * This request holds the parameters needed by the managerManagerApi server.  After setting any
     * optional parameters, call the {@link ChangeEmployeeRegIInRelationsGroup#execute()} method to
     * invoke the remote operation.
     *
     * @param regDeviceId
     * @param content the {@link com.example.operator.myapplication.backend.managerManagerApi.model.Employee}
     * @return the request
     */
    public ChangeEmployeeRegIInRelationsGroup changeEmployeeRegIInRelationsGroup(java.lang.String regDeviceId, com.example.operator.myapplication.backend.managerManagerApi.model.Employee content) throws java.io.IOException {
      ChangeEmployeeRegIInRelationsGroup result = new ChangeEmployeeRegIInRelationsGroup(regDeviceId, content);
      initialize(result);
      return result;
    }

    public class ChangeEmployeeRegIInRelationsGroup extends ManagerManagerApiRequest<Void> {

      private static final String REST_PATH = "managermanager/{regDeviceId}";

      /**
       * Create a request for the method "managerManager.changeEmployeeRegIInRelationsGroup".
       *
       * This request holds the parameters needed by the the managerManagerApi server.  After setting
       * any optional parameters, call the {@link ChangeEmployeeRegIInRelationsGroup#execute()} method
       * to invoke the remote operation. <p> {@link ChangeEmployeeRegIInRelationsGroup#initialize(com.go
       * ogle.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param regDeviceId
       * @param content the {@link com.example.operator.myapplication.backend.managerManagerApi.model.Employee}
       * @since 1.13
       */
      protected ChangeEmployeeRegIInRelationsGroup(java.lang.String regDeviceId, com.example.operator.myapplication.backend.managerManagerApi.model.Employee content) {
        super(ManagerManagerApi.this, "POST", REST_PATH, content, Void.class);
        this.regDeviceId = com.google.api.client.util.Preconditions.checkNotNull(regDeviceId, "Required parameter regDeviceId must be specified.");
      }

      @Override
      public ChangeEmployeeRegIInRelationsGroup setAlt(java.lang.String alt) {
        return (ChangeEmployeeRegIInRelationsGroup) super.setAlt(alt);
      }

      @Override
      public ChangeEmployeeRegIInRelationsGroup setFields(java.lang.String fields) {
        return (ChangeEmployeeRegIInRelationsGroup) super.setFields(fields);
      }

      @Override
      public ChangeEmployeeRegIInRelationsGroup setKey(java.lang.String key) {
        return (ChangeEmployeeRegIInRelationsGroup) super.setKey(key);
      }

      @Override
      public ChangeEmployeeRegIInRelationsGroup setOauthToken(java.lang.String oauthToken) {
        return (ChangeEmployeeRegIInRelationsGroup) super.setOauthToken(oauthToken);
      }

      @Override
      public ChangeEmployeeRegIInRelationsGroup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ChangeEmployeeRegIInRelationsGroup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ChangeEmployeeRegIInRelationsGroup setQuotaUser(java.lang.String quotaUser) {
        return (ChangeEmployeeRegIInRelationsGroup) super.setQuotaUser(quotaUser);
      }

      @Override
      public ChangeEmployeeRegIInRelationsGroup setUserIp(java.lang.String userIp) {
        return (ChangeEmployeeRegIInRelationsGroup) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String regDeviceId;

      /**

       */
      public java.lang.String getRegDeviceId() {
        return regDeviceId;
      }

      public ChangeEmployeeRegIInRelationsGroup setRegDeviceId(java.lang.String regDeviceId) {
        this.regDeviceId = regDeviceId;
        return this;
      }

      @Override
      public ChangeEmployeeRegIInRelationsGroup set(String parameterName, Object value) {
        return (ChangeEmployeeRegIInRelationsGroup) super.set(parameterName, value);
      }
    }

  }

  /**
   * Create a request for the method "alreadyExists".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link AlreadyExists#execute()} method to invoke the remote
   * operation.
   *
   * @param regDeviceId
   * @return the request
   */
  public AlreadyExists alreadyExists(java.lang.String regDeviceId) throws java.io.IOException {
    AlreadyExists result = new AlreadyExists(regDeviceId);
    initialize(result);
    return result;
  }

  public class AlreadyExists extends ManagerManagerApiRequest<com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager> {

    private static final String REST_PATH = "managerManager/exist";

    /**
     * Create a request for the method "alreadyExists".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link AlreadyExists#execute()} method to invoke the remote
     * operation. <p> {@link AlreadyExists#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param regDeviceId
     * @since 1.13
     */
    protected AlreadyExists(java.lang.String regDeviceId) {
      super(ManagerManagerApi.this, "GET", REST_PATH, null, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager.class);
      this.regDeviceId = com.google.api.client.util.Preconditions.checkNotNull(regDeviceId, "Required parameter regDeviceId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public AlreadyExists setAlt(java.lang.String alt) {
      return (AlreadyExists) super.setAlt(alt);
    }

    @Override
    public AlreadyExists setFields(java.lang.String fields) {
      return (AlreadyExists) super.setFields(fields);
    }

    @Override
    public AlreadyExists setKey(java.lang.String key) {
      return (AlreadyExists) super.setKey(key);
    }

    @Override
    public AlreadyExists setOauthToken(java.lang.String oauthToken) {
      return (AlreadyExists) super.setOauthToken(oauthToken);
    }

    @Override
    public AlreadyExists setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AlreadyExists) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AlreadyExists setQuotaUser(java.lang.String quotaUser) {
      return (AlreadyExists) super.setQuotaUser(quotaUser);
    }

    @Override
    public AlreadyExists setUserIp(java.lang.String userIp) {
      return (AlreadyExists) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String regDeviceId;

    /**

     */
    public java.lang.String getRegDeviceId() {
      return regDeviceId;
    }

    public AlreadyExists setRegDeviceId(java.lang.String regDeviceId) {
      this.regDeviceId = regDeviceId;
      return this;
    }

    @Override
    public AlreadyExists set(String parameterName, Object value) {
      return (AlreadyExists) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "chekingId".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link ChekingId#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public ChekingId chekingId(java.lang.Long id) throws java.io.IOException {
    ChekingId result = new ChekingId(id);
    initialize(result);
    return result;
  }

  public class ChekingId extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/check/{id}";

    /**
     * Create a request for the method "chekingId".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link ChekingId#execute()} method to invoke the remote
     * operation. <p> {@link
     * ChekingId#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected ChekingId(java.lang.Long id) {
      super(ManagerManagerApi.this, "GET", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ChekingId setAlt(java.lang.String alt) {
      return (ChekingId) super.setAlt(alt);
    }

    @Override
    public ChekingId setFields(java.lang.String fields) {
      return (ChekingId) super.setFields(fields);
    }

    @Override
    public ChekingId setKey(java.lang.String key) {
      return (ChekingId) super.setKey(key);
    }

    @Override
    public ChekingId setOauthToken(java.lang.String oauthToken) {
      return (ChekingId) super.setOauthToken(oauthToken);
    }

    @Override
    public ChekingId setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ChekingId) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ChekingId setQuotaUser(java.lang.String quotaUser) {
      return (ChekingId) super.setQuotaUser(quotaUser);
    }

    @Override
    public ChekingId setUserIp(java.lang.String userIp) {
      return (ChekingId) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public ChekingId setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public ChekingId set(String parameterName, Object value) {
      return (ChekingId) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "confirm".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link Confirm#execute()} method to invoke the remote operation.
   *
   * @param id
   * @param confirmemails
   * @return the request
   */
  public Confirm confirm(java.lang.Long id, java.util.List<java.lang.String> confirmemails) throws java.io.IOException {
    Confirm result = new Confirm(id, confirmemails);
    initialize(result);
    return result;
  }

  public class Confirm extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/confirm/{id}";

    /**
     * Create a request for the method "confirm".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link Confirm#execute()} method to invoke the remote
     * operation. <p> {@link
     * Confirm#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @param confirmemails
     * @since 1.13
     */
    protected Confirm(java.lang.Long id, java.util.List<java.lang.String> confirmemails) {
      super(ManagerManagerApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.confirmemails = com.google.api.client.util.Preconditions.checkNotNull(confirmemails, "Required parameter confirmemails must be specified.");
    }

    @Override
    public Confirm setAlt(java.lang.String alt) {
      return (Confirm) super.setAlt(alt);
    }

    @Override
    public Confirm setFields(java.lang.String fields) {
      return (Confirm) super.setFields(fields);
    }

    @Override
    public Confirm setKey(java.lang.String key) {
      return (Confirm) super.setKey(key);
    }

    @Override
    public Confirm setOauthToken(java.lang.String oauthToken) {
      return (Confirm) super.setOauthToken(oauthToken);
    }

    @Override
    public Confirm setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Confirm) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Confirm setQuotaUser(java.lang.String quotaUser) {
      return (Confirm) super.setQuotaUser(quotaUser);
    }

    @Override
    public Confirm setUserIp(java.lang.String userIp) {
      return (Confirm) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public Confirm setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key
    private java.util.List<java.lang.String> confirmemails;

    /**

     */
    public java.util.List<java.lang.String> getConfirmemails() {
      return confirmemails;
    }

    public Confirm setConfirmemails(java.util.List<java.lang.String> confirmemails) {
      this.confirmemails = confirmemails;
      return this;
    }

    @Override
    public Confirm set(String parameterName, Object value) {
      return (Confirm) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteEFromFriend".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link DeleteEFromFriend#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @param employeeEmail
   * @return the request
   */
  public DeleteEFromFriend deleteEFromFriend(java.lang.Long id, java.lang.String employeeEmail) throws java.io.IOException {
    DeleteEFromFriend result = new DeleteEFromFriend(id, employeeEmail);
    initialize(result);
    return result;
  }

  public class DeleteEFromFriend extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/deleteEFromFriend/{id}";

    /**
     * Create a request for the method "deleteEFromFriend".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link DeleteEFromFriend#execute()} method to invoke the
     * remote operation. <p> {@link DeleteEFromFriend#initialize(com.google.api.client.googleapis.serv
     * ices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param id
     * @param employeeEmail
     * @since 1.13
     */
    protected DeleteEFromFriend(java.lang.Long id, java.lang.String employeeEmail) {
      super(ManagerManagerApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.employeeEmail = com.google.api.client.util.Preconditions.checkNotNull(employeeEmail, "Required parameter employeeEmail must be specified.");
    }

    @Override
    public DeleteEFromFriend setAlt(java.lang.String alt) {
      return (DeleteEFromFriend) super.setAlt(alt);
    }

    @Override
    public DeleteEFromFriend setFields(java.lang.String fields) {
      return (DeleteEFromFriend) super.setFields(fields);
    }

    @Override
    public DeleteEFromFriend setKey(java.lang.String key) {
      return (DeleteEFromFriend) super.setKey(key);
    }

    @Override
    public DeleteEFromFriend setOauthToken(java.lang.String oauthToken) {
      return (DeleteEFromFriend) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteEFromFriend setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteEFromFriend) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteEFromFriend setQuotaUser(java.lang.String quotaUser) {
      return (DeleteEFromFriend) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteEFromFriend setUserIp(java.lang.String userIp) {
      return (DeleteEFromFriend) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public DeleteEFromFriend setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String employeeEmail;

    /**

     */
    public java.lang.String getEmployeeEmail() {
      return employeeEmail;
    }

    public DeleteEFromFriend setEmployeeEmail(java.lang.String employeeEmail) {
      this.employeeEmail = employeeEmail;
      return this;
    }

    @Override
    public DeleteEFromFriend set(String parameterName, Object value) {
      return (DeleteEFromFriend) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteListEFromFriend".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link DeleteListEFromFriend#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @param employeeListEmails
   * @return the request
   */
  public DeleteListEFromFriend deleteListEFromFriend(java.lang.Long id, java.util.List<java.lang.String> employeeListEmails) throws java.io.IOException {
    DeleteListEFromFriend result = new DeleteListEFromFriend(id, employeeListEmails);
    initialize(result);
    return result;
  }

  public class DeleteListEFromFriend extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/deleteListEFromFriend/{id}";

    /**
     * Create a request for the method "deleteListEFromFriend".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link DeleteListEFromFriend#execute()} method to invoke the
     * remote operation. <p> {@link DeleteListEFromFriend#initialize(com.google.api.client.googleapis.
     * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param id
     * @param employeeListEmails
     * @since 1.13
     */
    protected DeleteListEFromFriend(java.lang.Long id, java.util.List<java.lang.String> employeeListEmails) {
      super(ManagerManagerApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.employeeListEmails = com.google.api.client.util.Preconditions.checkNotNull(employeeListEmails, "Required parameter employeeListEmails must be specified.");
    }

    @Override
    public DeleteListEFromFriend setAlt(java.lang.String alt) {
      return (DeleteListEFromFriend) super.setAlt(alt);
    }

    @Override
    public DeleteListEFromFriend setFields(java.lang.String fields) {
      return (DeleteListEFromFriend) super.setFields(fields);
    }

    @Override
    public DeleteListEFromFriend setKey(java.lang.String key) {
      return (DeleteListEFromFriend) super.setKey(key);
    }

    @Override
    public DeleteListEFromFriend setOauthToken(java.lang.String oauthToken) {
      return (DeleteListEFromFriend) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteListEFromFriend setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteListEFromFriend) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteListEFromFriend setQuotaUser(java.lang.String quotaUser) {
      return (DeleteListEFromFriend) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteListEFromFriend setUserIp(java.lang.String userIp) {
      return (DeleteListEFromFriend) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public DeleteListEFromFriend setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key
    private java.util.List<java.lang.String> employeeListEmails;

    /**

     */
    public java.util.List<java.lang.String> getEmployeeListEmails() {
      return employeeListEmails;
    }

    public DeleteListEFromFriend setEmployeeListEmails(java.util.List<java.lang.String> employeeListEmails) {
      this.employeeListEmails = employeeListEmails;
      return this;
    }

    @Override
    public DeleteListEFromFriend set(String parameterName, Object value) {
      return (DeleteListEFromFriend) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deleteRequest".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link DeleteRequest#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @param deleteEmail
   * @return the request
   */
  public DeleteRequest deleteRequest(java.lang.Long id, java.lang.String deleteEmail) throws java.io.IOException {
    DeleteRequest result = new DeleteRequest(id, deleteEmail);
    initialize(result);
    return result;
  }

  public class DeleteRequest extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/deleteRequest/{id}";

    /**
     * Create a request for the method "deleteRequest".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link DeleteRequest#execute()} method to invoke the remote
     * operation. <p> {@link DeleteRequest#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @param deleteEmail
     * @since 1.13
     */
    protected DeleteRequest(java.lang.Long id, java.lang.String deleteEmail) {
      super(ManagerManagerApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.deleteEmail = com.google.api.client.util.Preconditions.checkNotNull(deleteEmail, "Required parameter deleteEmail must be specified.");
    }

    @Override
    public DeleteRequest setAlt(java.lang.String alt) {
      return (DeleteRequest) super.setAlt(alt);
    }

    @Override
    public DeleteRequest setFields(java.lang.String fields) {
      return (DeleteRequest) super.setFields(fields);
    }

    @Override
    public DeleteRequest setKey(java.lang.String key) {
      return (DeleteRequest) super.setKey(key);
    }

    @Override
    public DeleteRequest setOauthToken(java.lang.String oauthToken) {
      return (DeleteRequest) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteRequest) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteRequest setQuotaUser(java.lang.String quotaUser) {
      return (DeleteRequest) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteRequest setUserIp(java.lang.String userIp) {
      return (DeleteRequest) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public DeleteRequest setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String deleteEmail;

    /**

     */
    public java.lang.String getDeleteEmail() {
      return deleteEmail;
    }

    public DeleteRequest setDeleteEmail(java.lang.String deleteEmail) {
      this.deleteEmail = deleteEmail;
      return this;
    }

    @Override
    public DeleteRequest set(String parameterName, Object value) {
      return (DeleteRequest) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "get".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public Get get(java.lang.Long id) throws java.io.IOException {
    Get result = new Get(id);
    initialize(result);
    return result;
  }

  public class Get extends ManagerManagerApiRequest<com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager> {

    private static final String REST_PATH = "managerManager/{id}";

    /**
     * Create a request for the method "get".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     * <p> {@link
     * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
     * called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected Get(java.lang.Long id) {
      super(ManagerManagerApi.this, "GET", REST_PATH, null, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public Get setAlt(java.lang.String alt) {
      return (Get) super.setAlt(alt);
    }

    @Override
    public Get setFields(java.lang.String fields) {
      return (Get) super.setFields(fields);
    }

    @Override
    public Get setKey(java.lang.String key) {
      return (Get) super.setKey(key);
    }

    @Override
    public Get setOauthToken(java.lang.String oauthToken) {
      return (Get) super.setOauthToken(oauthToken);
    }

    @Override
    public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Get) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Get setQuotaUser(java.lang.String quotaUser) {
      return (Get) super.setQuotaUser(quotaUser);
    }

    @Override
    public Get setUserIp(java.lang.String userIp) {
      return (Get) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public Get setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public Get set(String parameterName, Object value) {
      return (Get) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getEmployeeRequest".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link GetEmployeeRequest#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public GetEmployeeRequest getEmployeeRequest(java.lang.Long id) throws java.io.IOException {
    GetEmployeeRequest result = new GetEmployeeRequest(id);
    initialize(result);
    return result;
  }

  public class GetEmployeeRequest extends ManagerManagerApiRequest<com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager> {

    private static final String REST_PATH = "managerManager/confirm/{id}";

    /**
     * Create a request for the method "getEmployeeRequest".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link GetEmployeeRequest#execute()} method to invoke the
     * remote operation. <p> {@link GetEmployeeRequest#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetEmployeeRequest(java.lang.Long id) {
      super(ManagerManagerApi.this, "GET", REST_PATH, null, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetEmployeeRequest setAlt(java.lang.String alt) {
      return (GetEmployeeRequest) super.setAlt(alt);
    }

    @Override
    public GetEmployeeRequest setFields(java.lang.String fields) {
      return (GetEmployeeRequest) super.setFields(fields);
    }

    @Override
    public GetEmployeeRequest setKey(java.lang.String key) {
      return (GetEmployeeRequest) super.setKey(key);
    }

    @Override
    public GetEmployeeRequest setOauthToken(java.lang.String oauthToken) {
      return (GetEmployeeRequest) super.setOauthToken(oauthToken);
    }

    @Override
    public GetEmployeeRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetEmployeeRequest) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetEmployeeRequest setQuotaUser(java.lang.String quotaUser) {
      return (GetEmployeeRequest) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetEmployeeRequest setUserIp(java.lang.String userIp) {
      return (GetEmployeeRequest) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetEmployeeRequest setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetEmployeeRequest set(String parameterName, Object value) {
      return (GetEmployeeRequest) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getManager".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link GetManager#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetManager getManager(java.lang.Long id) throws java.io.IOException {
    GetManager result = new GetManager(id);
    initialize(result);
    return result;
  }

  public class GetManager extends ManagerManagerApiRequest<com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager> {

    private static final String REST_PATH = "managerManager/getManager/{id}";

    /**
     * Create a request for the method "getManager".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link GetManager#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetManager#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetManager(java.lang.Long id) {
      super(ManagerManagerApi.this, "GET", REST_PATH, null, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetManager setAlt(java.lang.String alt) {
      return (GetManager) super.setAlt(alt);
    }

    @Override
    public GetManager setFields(java.lang.String fields) {
      return (GetManager) super.setFields(fields);
    }

    @Override
    public GetManager setKey(java.lang.String key) {
      return (GetManager) super.setKey(key);
    }

    @Override
    public GetManager setOauthToken(java.lang.String oauthToken) {
      return (GetManager) super.setOauthToken(oauthToken);
    }

    @Override
    public GetManager setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetManager) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetManager setQuotaUser(java.lang.String quotaUser) {
      return (GetManager) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetManager setUserIp(java.lang.String userIp) {
      return (GetManager) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetManager setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetManager set(String parameterName, Object value) {
      return (GetManager) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "giveEmployeetLocation".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link GiveEmployeetLocation#execute()} method to invoke the remote
   * operation.
   *
   * @param employeeEmail
   * @param id
   * @return the request
   */
  public GiveEmployeetLocation giveEmployeetLocation(java.lang.String employeeEmail, java.lang.Long id) throws java.io.IOException {
    GiveEmployeetLocation result = new GiveEmployeetLocation(employeeEmail, id);
    initialize(result);
    return result;
  }

  public class GiveEmployeetLocation extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/spy";

    /**
     * Create a request for the method "giveEmployeetLocation".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link GiveEmployeetLocation#execute()} method to invoke the
     * remote operation. <p> {@link GiveEmployeetLocation#initialize(com.google.api.client.googleapis.
     * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param employeeEmail
     * @param id
     * @since 1.13
     */
    protected GiveEmployeetLocation(java.lang.String employeeEmail, java.lang.Long id) {
      super(ManagerManagerApi.this, "GET", REST_PATH, null, Void.class);
      this.employeeEmail = com.google.api.client.util.Preconditions.checkNotNull(employeeEmail, "Required parameter employeeEmail must be specified.");
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GiveEmployeetLocation setAlt(java.lang.String alt) {
      return (GiveEmployeetLocation) super.setAlt(alt);
    }

    @Override
    public GiveEmployeetLocation setFields(java.lang.String fields) {
      return (GiveEmployeetLocation) super.setFields(fields);
    }

    @Override
    public GiveEmployeetLocation setKey(java.lang.String key) {
      return (GiveEmployeetLocation) super.setKey(key);
    }

    @Override
    public GiveEmployeetLocation setOauthToken(java.lang.String oauthToken) {
      return (GiveEmployeetLocation) super.setOauthToken(oauthToken);
    }

    @Override
    public GiveEmployeetLocation setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GiveEmployeetLocation) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GiveEmployeetLocation setQuotaUser(java.lang.String quotaUser) {
      return (GiveEmployeetLocation) super.setQuotaUser(quotaUser);
    }

    @Override
    public GiveEmployeetLocation setUserIp(java.lang.String userIp) {
      return (GiveEmployeetLocation) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String employeeEmail;

    /**

     */
    public java.lang.String getEmployeeEmail() {
      return employeeEmail;
    }

    public GiveEmployeetLocation setEmployeeEmail(java.lang.String employeeEmail) {
      this.employeeEmail = employeeEmail;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GiveEmployeetLocation setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GiveEmployeetLocation set(String parameterName, Object value) {
      return (GiveEmployeetLocation) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insert".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager}
   * @return the request
   */
  public Insert insert(com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager content) throws java.io.IOException {
    Insert result = new Insert(content);
    initialize(result);
    return result;
  }

  public class Insert extends ManagerManagerApiRequest<com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager> {

    private static final String REST_PATH = "managerManager";

    /**
     * Create a request for the method "insert".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
     * operation. <p> {@link
     * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager}
     * @since 1.13
     */
    protected Insert(com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager content) {
      super(ManagerManagerApi.this, "POST", REST_PATH, content, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager.class);
    }

    @Override
    public Insert setAlt(java.lang.String alt) {
      return (Insert) super.setAlt(alt);
    }

    @Override
    public Insert setFields(java.lang.String fields) {
      return (Insert) super.setFields(fields);
    }

    @Override
    public Insert setKey(java.lang.String key) {
      return (Insert) super.setKey(key);
    }

    @Override
    public Insert setOauthToken(java.lang.String oauthToken) {
      return (Insert) super.setOauthToken(oauthToken);
    }

    @Override
    public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Insert) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Insert setQuotaUser(java.lang.String quotaUser) {
      return (Insert) super.setQuotaUser(quotaUser);
    }

    @Override
    public Insert setUserIp(java.lang.String userIp) {
      return (Insert) super.setUserIp(userIp);
    }

    @Override
    public Insert set(String parameterName, Object value) {
      return (Insert) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "list".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public List list() throws java.io.IOException {
    List result = new List();
    initialize(result);
    return result;
  }

  public class List extends ManagerManagerApiRequest<com.example.operator.myapplication.backend.managerManagerApi.model.CollectionResponseManagerManager> {

    private static final String REST_PATH = "managerManager";

    /**
     * Create a request for the method "list".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     * <p> {@link
     * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
     * called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected List() {
      super(ManagerManagerApi.this, "GET", REST_PATH, null, com.example.operator.myapplication.backend.managerManagerApi.model.CollectionResponseManagerManager.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public List setAlt(java.lang.String alt) {
      return (List) super.setAlt(alt);
    }

    @Override
    public List setFields(java.lang.String fields) {
      return (List) super.setFields(fields);
    }

    @Override
    public List setKey(java.lang.String key) {
      return (List) super.setKey(key);
    }

    @Override
    public List setOauthToken(java.lang.String oauthToken) {
      return (List) super.setOauthToken(oauthToken);
    }

    @Override
    public List setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (List) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public List setQuotaUser(java.lang.String quotaUser) {
      return (List) super.setQuotaUser(quotaUser);
    }

    @Override
    public List setUserIp(java.lang.String userIp) {
      return (List) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public List setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public List setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public List set(String parameterName, Object value) {
      return (List) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "patch".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
   *
   * @param id
   * @param content the {@link com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager}
   * @return the request
   */
  public Patch patch(java.lang.Long id, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager content) throws java.io.IOException {
    Patch result = new Patch(id, content);
    initialize(result);
    return result;
  }

  public class Patch extends ManagerManagerApiRequest<com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager> {

    private static final String REST_PATH = "managerManager/{id}";

    /**
     * Create a request for the method "patch".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
     * operation. <p> {@link
     * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @param content the {@link com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager}
     * @since 1.13
     */
    protected Patch(java.lang.Long id, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager content) {
      super(ManagerManagerApi.this, "PATCH", REST_PATH, content, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public Patch setAlt(java.lang.String alt) {
      return (Patch) super.setAlt(alt);
    }

    @Override
    public Patch setFields(java.lang.String fields) {
      return (Patch) super.setFields(fields);
    }

    @Override
    public Patch setKey(java.lang.String key) {
      return (Patch) super.setKey(key);
    }

    @Override
    public Patch setOauthToken(java.lang.String oauthToken) {
      return (Patch) super.setOauthToken(oauthToken);
    }

    @Override
    public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Patch) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Patch setQuotaUser(java.lang.String quotaUser) {
      return (Patch) super.setQuotaUser(quotaUser);
    }

    @Override
    public Patch setUserIp(java.lang.String userIp) {
      return (Patch) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public Patch setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public Patch set(String parameterName, Object value) {
      return (Patch) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "remove".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link Remove#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public Remove remove(java.lang.Long id) throws java.io.IOException {
    Remove result = new Remove(id);
    initialize(result);
    return result;
  }

  public class Remove extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/{id}";

    /**
     * Create a request for the method "remove".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link Remove#execute()} method to invoke the remote
     * operation. <p> {@link
     * Remove#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected Remove(java.lang.Long id) {
      super(ManagerManagerApi.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public Remove setAlt(java.lang.String alt) {
      return (Remove) super.setAlt(alt);
    }

    @Override
    public Remove setFields(java.lang.String fields) {
      return (Remove) super.setFields(fields);
    }

    @Override
    public Remove setKey(java.lang.String key) {
      return (Remove) super.setKey(key);
    }

    @Override
    public Remove setOauthToken(java.lang.String oauthToken) {
      return (Remove) super.setOauthToken(oauthToken);
    }

    @Override
    public Remove setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Remove) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Remove setQuotaUser(java.lang.String quotaUser) {
      return (Remove) super.setQuotaUser(quotaUser);
    }

    @Override
    public Remove setUserIp(java.lang.String userIp) {
      return (Remove) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public Remove setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public Remove set(String parameterName, Object value) {
      return (Remove) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sPY".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link SPY#execute()} method to invoke the remote operation.
   *
   * @param id
   * @param employeeEmails
   * @param spymessage
   * @return the request
   */
  public SPY sPY(java.lang.Long id, java.util.List<java.lang.String> employeeEmails, java.lang.String spymessage) throws java.io.IOException {
    SPY result = new SPY(id, employeeEmails, spymessage);
    initialize(result);
    return result;
  }

  public class SPY extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/SPY/{id}";

    /**
     * Create a request for the method "sPY".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link SPY#execute()} method to invoke the remote operation.
     * <p> {@link
     * SPY#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
     * called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @param employeeEmails
     * @param spymessage
     * @since 1.13
     */
    protected SPY(java.lang.Long id, java.util.List<java.lang.String> employeeEmails, java.lang.String spymessage) {
      super(ManagerManagerApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.employeeEmails = com.google.api.client.util.Preconditions.checkNotNull(employeeEmails, "Required parameter employeeEmails must be specified.");
      this.spymessage = com.google.api.client.util.Preconditions.checkNotNull(spymessage, "Required parameter spymessage must be specified.");
    }

    @Override
    public SPY setAlt(java.lang.String alt) {
      return (SPY) super.setAlt(alt);
    }

    @Override
    public SPY setFields(java.lang.String fields) {
      return (SPY) super.setFields(fields);
    }

    @Override
    public SPY setKey(java.lang.String key) {
      return (SPY) super.setKey(key);
    }

    @Override
    public SPY setOauthToken(java.lang.String oauthToken) {
      return (SPY) super.setOauthToken(oauthToken);
    }

    @Override
    public SPY setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SPY) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SPY setQuotaUser(java.lang.String quotaUser) {
      return (SPY) super.setQuotaUser(quotaUser);
    }

    @Override
    public SPY setUserIp(java.lang.String userIp) {
      return (SPY) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public SPY setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key
    private java.util.List<java.lang.String> employeeEmails;

    /**

     */
    public java.util.List<java.lang.String> getEmployeeEmails() {
      return employeeEmails;
    }

    public SPY setEmployeeEmails(java.util.List<java.lang.String> employeeEmails) {
      this.employeeEmails = employeeEmails;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String spymessage;

    /**

     */
    public java.lang.String getSpymessage() {
      return spymessage;
    }

    public SPY setSpymessage(java.lang.String spymessage) {
      this.spymessage = spymessage;
      return this;
    }

    @Override
    public SPY set(String parameterName, Object value) {
      return (SPY) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "setManagerRegId".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link SetManagerRegId#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @param setRegId
   * @return the request
   */
  public SetManagerRegId setManagerRegId(java.lang.Long id, java.lang.String setRegId) throws java.io.IOException {
    SetManagerRegId result = new SetManagerRegId(id, setRegId);
    initialize(result);
    return result;
  }

  public class SetManagerRegId extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/setManagerRegId/{id}";

    /**
     * Create a request for the method "setManagerRegId".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link SetManagerRegId#execute()} method to invoke the remote
     * operation. <p> {@link SetManagerRegId#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @param setRegId
     * @since 1.13
     */
    protected SetManagerRegId(java.lang.Long id, java.lang.String setRegId) {
      super(ManagerManagerApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.setRegId = com.google.api.client.util.Preconditions.checkNotNull(setRegId, "Required parameter setRegId must be specified.");
    }

    @Override
    public SetManagerRegId setAlt(java.lang.String alt) {
      return (SetManagerRegId) super.setAlt(alt);
    }

    @Override
    public SetManagerRegId setFields(java.lang.String fields) {
      return (SetManagerRegId) super.setFields(fields);
    }

    @Override
    public SetManagerRegId setKey(java.lang.String key) {
      return (SetManagerRegId) super.setKey(key);
    }

    @Override
    public SetManagerRegId setOauthToken(java.lang.String oauthToken) {
      return (SetManagerRegId) super.setOauthToken(oauthToken);
    }

    @Override
    public SetManagerRegId setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SetManagerRegId) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SetManagerRegId setQuotaUser(java.lang.String quotaUser) {
      return (SetManagerRegId) super.setQuotaUser(quotaUser);
    }

    @Override
    public SetManagerRegId setUserIp(java.lang.String userIp) {
      return (SetManagerRegId) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public SetManagerRegId setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String setRegId;

    /**

     */
    public java.lang.String getSetRegId() {
      return setRegId;
    }

    public SetManagerRegId setSetRegId(java.lang.String setRegId) {
      this.setRegId = setRegId;
      return this;
    }

    @Override
    public SetManagerRegId set(String parameterName, Object value) {
      return (SetManagerRegId) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "stopSpy".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link StopSpy#execute()} method to invoke the remote operation.
   *
   * @param id
   * @param email
   * @return the request
   */
  public StopSpy stopSpy(java.lang.Long id, java.lang.String email) throws java.io.IOException {
    StopSpy result = new StopSpy(id, email);
    initialize(result);
    return result;
  }

  public class StopSpy extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/{id}";

    /**
     * Create a request for the method "stopSpy".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link StopSpy#execute()} method to invoke the remote
     * operation. <p> {@link
     * StopSpy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @param email
     * @since 1.13
     */
    protected StopSpy(java.lang.Long id, java.lang.String email) {
      super(ManagerManagerApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
    }

    @Override
    public StopSpy setAlt(java.lang.String alt) {
      return (StopSpy) super.setAlt(alt);
    }

    @Override
    public StopSpy setFields(java.lang.String fields) {
      return (StopSpy) super.setFields(fields);
    }

    @Override
    public StopSpy setKey(java.lang.String key) {
      return (StopSpy) super.setKey(key);
    }

    @Override
    public StopSpy setOauthToken(java.lang.String oauthToken) {
      return (StopSpy) super.setOauthToken(oauthToken);
    }

    @Override
    public StopSpy setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StopSpy) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StopSpy setQuotaUser(java.lang.String quotaUser) {
      return (StopSpy) super.setQuotaUser(quotaUser);
    }

    @Override
    public StopSpy setUserIp(java.lang.String userIp) {
      return (StopSpy) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public StopSpy setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public StopSpy setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @Override
    public StopSpy set(String parameterName, Object value) {
      return (StopSpy) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "update".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
   *
   * @param id
   * @param content the {@link com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager}
   * @return the request
   */
  public Update update(java.lang.Long id, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager content) throws java.io.IOException {
    Update result = new Update(id, content);
    initialize(result);
    return result;
  }

  public class Update extends ManagerManagerApiRequest<com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager> {

    private static final String REST_PATH = "managerManager/{id}";

    /**
     * Create a request for the method "update".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link Update#execute()} method to invoke the remote
     * operation. <p> {@link
     * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @param content the {@link com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager}
     * @since 1.13
     */
    protected Update(java.lang.Long id, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager content) {
      super(ManagerManagerApi.this, "PUT", REST_PATH, content, com.example.operator.myapplication.backend.managerManagerApi.model.ManagerManager.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public Update setAlt(java.lang.String alt) {
      return (Update) super.setAlt(alt);
    }

    @Override
    public Update setFields(java.lang.String fields) {
      return (Update) super.setFields(fields);
    }

    @Override
    public Update setKey(java.lang.String key) {
      return (Update) super.setKey(key);
    }

    @Override
    public Update setOauthToken(java.lang.String oauthToken) {
      return (Update) super.setOauthToken(oauthToken);
    }

    @Override
    public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Update) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Update setQuotaUser(java.lang.String quotaUser) {
      return (Update) super.setQuotaUser(quotaUser);
    }

    @Override
    public Update setUserIp(java.lang.String userIp) {
      return (Update) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public Update setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public Update set(String parameterName, Object value) {
      return (Update) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "workAroundFillList".
   *
   * This request holds the parameters needed by the managerManagerApi server.  After setting any
   * optional parameters, call the {@link WorkAroundFillList#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public WorkAroundFillList workAroundFillList(java.lang.Long id) throws java.io.IOException {
    WorkAroundFillList result = new WorkAroundFillList(id);
    initialize(result);
    return result;
  }

  public class WorkAroundFillList extends ManagerManagerApiRequest<Void> {

    private static final String REST_PATH = "managerManager/workAroundFiilList/{id}";

    /**
     * Create a request for the method "workAroundFillList".
     *
     * This request holds the parameters needed by the the managerManagerApi server.  After setting
     * any optional parameters, call the {@link WorkAroundFillList#execute()} method to invoke the
     * remote operation. <p> {@link WorkAroundFillList#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected WorkAroundFillList(java.lang.Long id) {
      super(ManagerManagerApi.this, "POST", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public WorkAroundFillList setAlt(java.lang.String alt) {
      return (WorkAroundFillList) super.setAlt(alt);
    }

    @Override
    public WorkAroundFillList setFields(java.lang.String fields) {
      return (WorkAroundFillList) super.setFields(fields);
    }

    @Override
    public WorkAroundFillList setKey(java.lang.String key) {
      return (WorkAroundFillList) super.setKey(key);
    }

    @Override
    public WorkAroundFillList setOauthToken(java.lang.String oauthToken) {
      return (WorkAroundFillList) super.setOauthToken(oauthToken);
    }

    @Override
    public WorkAroundFillList setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (WorkAroundFillList) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public WorkAroundFillList setQuotaUser(java.lang.String quotaUser) {
      return (WorkAroundFillList) super.setQuotaUser(quotaUser);
    }

    @Override
    public WorkAroundFillList setUserIp(java.lang.String userIp) {
      return (WorkAroundFillList) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public WorkAroundFillList setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public WorkAroundFillList set(String parameterName, Object value) {
      return (WorkAroundFillList) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link ManagerManagerApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link ManagerManagerApi}. */
    @Override
    public ManagerManagerApi build() {
      return new ManagerManagerApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ManagerManagerApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setManagerManagerApiRequestInitializer(
        ManagerManagerApiRequestInitializer managermanagerapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(managermanagerapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
