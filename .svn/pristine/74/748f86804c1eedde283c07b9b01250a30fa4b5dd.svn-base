package com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Employee.employeeMap;

import android.app.Service;
import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.os.IBinder;
import android.support.annotation.Nullable;
import android.util.Log;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Employee.AsynTaskForEmployee;
import com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Employee.EmployeeAsynTasks;

/**
 * Created by Operator on 26.05.2016.
 */

public class GetLocationService extends Service implements
        ConnectionCallbacks, OnConnectionFailedListener {


    Location location;
    private long myIdInBase;
    Intent intent;
    LocationRequest locationRequest;

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }


    final String LOG_TAG = "myLogs";
    /**
     * Provides the entry point to Google Play services.
     */
    protected GoogleApiClient mGoogleApiClient;
    /**
     * Represents a geographical location.
     */
    protected Location mLastLocation;

  //  protected TextView mLatitudeText;
   // protected TextView mLongitudeText;

    protected static final String TAG = "basic-location-sample";




    public void onCreate() {
        super.onCreate();
        Log.d(LOG_TAG, "MyService onCreate");

        // Create an instance of GoogleAPIClient.
        if (mGoogleApiClient == null) {
            mGoogleApiClient = new GoogleApiClient.Builder(this)
                    .addConnectionCallbacks(this)
                    .addOnConnectionFailedListener(this)
                    .addApi(LocationServices.API)
                    .build();
        }

    }

    public void onDestroy() {
        super.onDestroy();
        Log.d(LOG_TAG, "MyService onDestroy");

        if (mGoogleApiClient.isConnected()) {
            mGoogleApiClient.disconnect();
        }

    }

    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(LOG_TAG, "MyService onStartCommand");

       // Toast.makeText(this, "MyService onStartCommand", Toast.LENGTH_LONG).show();

        myIdInBase = intent.getLongExtra("id", 0 );

        mGoogleApiClient.connect();

        return super.onStartCommand(intent, flags, startId);



    }



    /**
     * Runs when a GoogleApiClient object successfully connects.
     */
    @Override
    public void onConnected(Bundle connectionHint) {
        // Provides a simple way of getting a device's location and is well suited for
        // applications that do not require a fine-grained location and that do not need location
        // updates. Gets the best and most recent location currently available, which may be null
        // in rare cases when a location is not available.


        //locationRequest = LocationRequest.create();
        //locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);

        mLastLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        if (mLastLocation != null) {

            //Location loc = new Location("dummyprovider");

            //loc.setEmployeeLatitude(mLastLocation.getEmployeeLatitude());
           // loc.setEmployeeLongitude(mLastLocation.getEmployeeLatitude());

           // mLatitudeText.setText(String.valueOf(mLastLocation.getEmployeeLatitude()));
           // mLongitudeText.setText(String.valueOf(mLastLocation.getEmployeeLongitude()));

            double [] locArray  =  new  double[]{mLastLocation.getLatitude(), mLastLocation.getLongitude()};

            Toast.makeText(this, String.valueOf(mLastLocation.getLatitude())+"long:" +String.valueOf(mLastLocation.getLongitude()), Toast.LENGTH_LONG).show();



            //Make request to server for task sending message to manager client with employee location
            new EmployeeAsynTasks(myIdInBase,  locArray, AsynTaskForEmployee.TAKE_LOCATION).execute();



            stopSelf();



        } else {
            Toast.makeText(this, "no_location_detected", Toast.LENGTH_LONG).show();
            stopSelf();
        }
    }




    @Override
    public void onConnectionFailed(ConnectionResult result) {
        // Refer to the javadoc for ConnectionResult to see what error codes might be returned in
        // onConnectionFailed.
        Log.i(TAG, "Connection failed: ConnectionResult.getErrorCode() = " + result.getErrorCode());

        stopSelf();
    }





    @Override
    public void onConnectionSuspended(int cause) {
        // The connection to Google Play services was lost for some reason. We call connect() to
        // attempt to re-establish the connection.
        Log.i(TAG, "Connection suspended");
        mGoogleApiClient.connect();
    }


}
