package com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.GCM;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.widget.Toast;

import com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Employee.employeeMap.CircleLabel;
import com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Employee.employeeMap.GetLocationService;
import com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Employee.spyingViaGeofence.GPSService;
import com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Employee.spyingViaGeofence.GeofencingService;
import com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Manager.EmployeeLocation;
import com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Manager.ManagerCabinetListActivity;

import org.json.JSONException;
import org.json.JSONObject;

/**
 * Created by Operator on 24.03.2016.
 */
public class MessageAgent {

    private String message;
    private JSONObject reader;
    private int kindMessage;
    private static final String TAG = "MyActivity";
    private String emailFrom;
    private ParseSpyMessage parseSpyMessage;
    private GcmIntentService context;

    // Идентификатор уведомления
    private static final int NOTIFY_ID = 101;
    private long myIdInBase = 0;

    //for work with servise to put marker
    private MyServiseSetMarker myService;
    private boolean bound = false;
    //
    public static final String BROADCAST_ACTION = "com.quest.uni2b.appengine.gsm.demo.usertouserdemo2svn020316.Manager";
    private Intent intent;

    //for new_e_req
    private  int amountReq;

    private ShowSpyNotifToEmployee spyNotifToEmployee;


    private EmployeeLocation employeeLocation;



    private ParseEmployeeOutsideMessage parseEmployeeOutsideMessage;

            public MessageAgent(String message, GcmIntentService context) {
                this.context = context;
                this.message = message;
            }

        void processMessage (){

            try {
                JSONObject reader = new JSONObject(message);
                //get detect constant
                kindMessage = reader.getInt("kind");
                emailFrom = reader.getString("from");
                //ask different task, detected via constant
                distributeTask(kindMessage, reader);

        } catch (JSONException e) {
            e.printStackTrace();
        }




    }


    private void distributeTask (int kindMessage, JSONObject reader) {
        String tempMessage;

       //JSONObject readerInTask;

            // readerInTask = new JSONObject(message);


        //kindMessage is detecting constant
        switch (kindMessage){
        case MessageConstant.KIND_SPY:
            try {





                parseSpyMessage = new ParseSpyMessage(reader.getJSONObject("data"),context);
                //get data about circle - label  from manager message into special object
                CircleLabel circleLabel= parseSpyMessage.getСircle();
                //TODO_d+: get new MYGeofence obj from prseSpyMEsssg
                //TODO_d+: run GeofencingService
                 //just matrix reload comment

                //<!--24 june 16 14:30
                //TODO_aborted 1>>
                //TODO_aborted check if geofence ID or GPS ID
                //TODO_aborted get from reader.getJSONObject("data").get( "geofence", true or false)
                //TODO_aborted and start or geofence or gps

                // startGeofencingService ();


                // openAlert();

                startGPSService (reader.getJSONObject("data"));

                ShowSpyNotifToEmployee
                spyNotifToEmployee = new ShowSpyNotifToEmployee ( context,circleLabel );
                spyNotifToEmployee.showNotification();
               //-->
                //TODO_accepted: send message to manager spy is begin (also info -employee in circle or out)
                //<!---14june16
             //  Intent employeeMap = new Intent(context, EmployeeMapActivity.class);
              //  employeeMap.putExtra("latitude",34.6);
              //  employeeMap.putExtra("longitude", 75.5);
               // employeeMap.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
              //  CircleLabel.stlongitude = cl.getEmployeeLongitude();
               // CircleLabel.stLatitude = cl.getEmployeeLatitude();
              //  CircleLabel.stRadius =cl.getRadius();

             // employeeMap.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
              // context.startActivity(employeeMap);

             //   Toast.makeText(context,"Hello i am spy !"+"/"+  cl.getRadius()+"/"+ cl.getEmployeeLatitude()+"/"+ cl.getEmployeeLongitude(), Toast.LENGTH_LONG).show();

            } catch (JSONException e) {
                e.printStackTrace();
            }



            break;
        case MessageConstant.SIMPLE_MESSAGE:

            try {
              tempMessage =  reader.getString("text");

                Toast.makeText(context,tempMessage, Toast.LENGTH_LONG).show();
            } catch (JSONException e) {
                e.printStackTrace();
            }

            break;

        //TODO_aborted set new name EXIT_ENTER_MESSAGE
            case MessageConstant.OUTSIDE_MESSAGE:
                try {

                    //for getting new status in  employees recycler view
                    ManagerCabinetListActivity.flagNewRequest =true;

                    parseEmployeeOutsideMessage = new ParseEmployeeOutsideMessage(reader.getJSONObject("data"), context);

                      employeeLocation =    parseEmployeeOutsideMessage.getСircle();

                   //detect how employee
                    employeeLocation.setEmployeeEmail(emailFrom);

                  //  EmployeeLocation.employeeEmail = emailFrom;


                        ShowToManagerNotifications showToManager = new ShowToManagerNotifications(employeeLocation);


                    showToManager.ShowNotification(context);

                } catch (JSONException e) {
                    e.printStackTrace();
                }
                break;

            //Give_location = "8"

            //Message for employee with request give my location to manager
            //After that as Employee have got this notification, app is calling method getGPSLocation()
            //And send data to manager
            case MessageConstant.GIVE_LOCATION:




                //get SharedPreferences from getSharedPreferences("name_file", MODE_PRIVATE)
                SharedPreferences shared = context.getSharedPreferences("info",Context.MODE_PRIVATE);
                //Using getXXX- with XX is type date you wrote to file "name_file"
                String string_temp = shared.getString("employee id", "");
                if ( string_temp ==""){
                    Toast.makeText(context, "You have not employee acc!", Toast.LENGTH_LONG).show();
                }else {
                    myIdInBase = Long.parseLong(string_temp);
                }
                /*
                //Make request to server for task sending message to manager client with employee location
                new EmployeeAsynTasks(context, myIdInBase,  getGPSLocation(), AsynTaskForEmployee.TAKE_LOCATION).execute();

                    */

                getGPSLocation();


                break;


            //Message for manager info about employee current position on map
            case  MessageConstant.TAKE_LOCATION:

                try {
                    double latitude =  reader.getDouble("latitude");
                    double longitude = reader.getDouble("longitude");
                   // Toast.makeText(context, (int) latitude +"/"+(int) longitude, Toast.LENGTH_LONG).show();

                    setMarker(latitude,longitude);

                } catch (JSONException e) {
                    e.printStackTrace();
                }

                break;

            //<!--
            //TODO_DONE+_01_07_16: case NEW_E_REQ after get this message create notification new e request.
            //It open manager cabinet activity.
            //Also it have some message. For example :"you have 2 new request"
            //New notification rewrites old, because the same notification id

            case MessageConstant.NEW_EMPLOYEE_REQUEST:

                try {
                    amountReq = reader.getInt("amount requests");
                    Toast.makeText(context,"I have new requestsn " + amountReq+" From "+emailFrom, Toast.LENGTH_LONG).show();
                        ShowNewEReqToM showNewEReqToM = new ShowNewEReqToM( context, emailFrom, amountReq);
                        showNewEReqToM.ShowNotification();

                } catch (JSONException e) {
                    e.printStackTrace();
                }

                break;

            //-->

            //<!---
            //TODO_done+08/june/16 case INFO_TO_EMPLOYEE_REQ
            //TODO_ show notification - you are confirmed, or you are deleted from request
            case MessageConstant.INFO_TO_EMPLOYEE_REQ:

        String tempMssg = "NONE";
                try {
                   tempMssg= reader.getString("message to employee");
                } catch (JSONException e) {
                    e.printStackTrace();
                }

                ShowToEReqInfo showToEReqInfo = new ShowToEReqInfo(context,emailFrom,tempMssg);
                showToEReqInfo.ShowNotification();

                break;

            //<!---18:00 17june16
            //TODO_d+:1-----
            //TODO_d+33min: case kind with id STOP_SPY
            //TODO_done+33min: just stop spy service in employee client

            case MessageConstant.STOP_SPY:

                //<!--14 40 23june 16
                //TODO_aborted 2>>
                //TODO_aborted CHECK if geofence id - stop geofence service

                //-->

                context.stopService(new Intent(context,GPSService.class));
            //<--

            //TODO_aborted:2-----
            //TODO_aborted: after send OUTSIDE_MESSAGE with id status STOPPING SPY


            //<--
                break;

    }
    }

    private void startGPSService (JSONObject data) throws JSONException {


        //just in case service is running
        context.stopService(new Intent(context,GPSService.class));

        Intent  intent1 = new Intent(context, GPSService.class);

        Bundle params = new Bundle();
        //params.putDouble


        params.putDouble("latitude",data.getDouble("latitude"));
        params.putDouble("longitude", data.getDouble("longitude") );
        params.putDouble( "radius", data.getDouble("radius"));

        intent1.putExtras(params);

        context.startService(intent1);



    }


    private void startGeofencingService (){


        Toast.makeText(context,"connected", Toast.LENGTH_SHORT).show();

        Intent geofencingService = new Intent(context, GeofencingService.class);
        geofencingService.setAction(String.valueOf(Math.random()));
        geofencingService.putExtra(GeofencingService.EXTRA_ACTION, GeofencingService.Action.ADD);
        geofencingService.putExtra(GeofencingService.EXTRA_GEOFENCE,  parseSpyMessage.getMyGeofence());

        context.startService(geofencingService);

      //  context.startService(new Intent(context,GPSService.class));



    }

    private void setMarker(double latitude, double longitude) {

       // Intent intent = new Intent(context, MyServiseSetMarker.class);
       // bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE);

       //UserMapsActivity context2 = context;

        intent = new Intent(BROADCAST_ACTION);
        intent.putExtra("latitude", latitude);
        intent.putExtra("longitude", longitude);

        context.sendBroadcast(intent);
        //context.startService(new Intent(context, MyServiseSetMarker.class));

    }


    private void getGPSLocation(){

       // Toast.makeText(context, "Get ELOC request", Toast.LENGTH_LONG).show();

        double latitude =0;
        double longitude = 0;

        // create new service
        // start new service
        //set context to intent to give it to service
        // myIdInBase = intent.getLongExtra("id", 0 );

        //myIdInBase = 1 ;
        //i.putExtra("key", long value);

        Intent  i = new Intent(context, GetLocationService.class);
        i.putExtra("id", myIdInBase);
        context.startService(i);


        //-----<





      /*  Location gpsLocation = appLocationService
                .getLocation(LocationManager.GPS_PROVIDER);



        if (gpsLocation != null) {
             latitude = gpsLocation.getEmployeeLatitude();
            longitude = gpsLocation.getEmployeeLongitude();
            //toast in employee client
            Toast.makeText(
                    context.getApplicationContext(),
                    "Mobile Location (GPS): \nLatitude: " + latitude
                            + "\nLongitude: " + longitude,
                    Toast.LENGTH_LONG).show();
        }*/

       // return new double[]{latitude, longitude};
    }




}




